[{"C:\\node_project\\react-assignment\\src\\index.js":"1","C:\\node_project\\react-assignment\\src\\reportWebVitals.js":"2","C:\\node_project\\react-assignment\\src\\modules\\App.js":"3","C:\\node_project\\react-assignment\\src\\modules\\dishes\\list\\index.js":"4","C:\\node_project\\react-assignment\\src\\modules\\dishes\\list\\List.js":"5","C:\\node_project\\react-assignment\\src\\redux\\store.js":"6","C:\\node_project\\react-assignment\\src\\redux\\reducers\\rootReducer.js":"7","C:\\node_project\\react-assignment\\src\\redux\\sagas\\rootSaga.js":"8","C:\\node_project\\react-assignment\\src\\redux\\reducers\\dish.reducer.js":"9","C:\\node_project\\react-assignment\\src\\redux\\sagas\\dish.saga.js":"10","C:\\node_project\\react-assignment\\src\\redux\\types\\dish.actions.types.js":"11","C:\\node_project\\react-assignment\\src\\redux\\actions\\dish.actions.js":"12","C:\\node_project\\react-assignment\\src\\services\\dish.js":"13","C:\\node_project\\react-assignment\\src\\modules\\global\\CustomModal.js":"14","C:\\node_project\\react-assignment\\src\\utils\\imageToBase64.js":"15","C:\\node_project\\react-assignment\\src\\modules\\dishes\\card\\index.js":"16","C:\\node_project\\react-assignment\\src\\modules\\dishes\\card\\DishCard.js":"17","C:\\node_project\\react-assignment\\src\\modules\\dishes\\container\\index.js":"18","C:\\node_project\\react-assignment\\src\\modules\\dishes\\container\\DishComponent.js":"19","C:\\node_project\\react-assignment\\src\\modules\\dishes\\details\\index.js":"20","C:\\node_project\\react-assignment\\src\\modules\\dishes\\details\\DishDetails.js":"21"},{"size":601,"mtime":1612010194091,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1611977039020,"results":"24","hashOfConfig":"23"},{"size":1206,"mtime":1612071725983,"results":"25","hashOfConfig":"23"},{"size":126,"mtime":1611981339998,"results":"26","hashOfConfig":"23"},{"size":12554,"mtime":1612071416672,"results":"27","hashOfConfig":"23"},{"size":473,"mtime":1612009819824,"results":"28","hashOfConfig":"23"},{"size":191,"mtime":1611981525172,"results":"29","hashOfConfig":"23"},{"size":152,"mtime":1611981139517,"results":"30","hashOfConfig":"23"},{"size":1229,"mtime":1612062617743,"results":"31","hashOfConfig":"23"},{"size":890,"mtime":1612062644200,"results":"32","hashOfConfig":"23"},{"size":335,"mtime":1612023911954,"results":"33","hashOfConfig":"23"},{"size":413,"mtime":1612013293020,"results":"34","hashOfConfig":"23"},{"size":670,"mtime":1612018358086,"results":"35","hashOfConfig":"23"},{"size":2290,"mtime":1612074483745,"results":"36","hashOfConfig":"23"},{"size":268,"mtime":1612018349355,"results":"37","hashOfConfig":"23"},{"size":157,"mtime":1612013809083,"results":"38","hashOfConfig":"23"},{"size":3262,"mtime":1612074024412,"results":"39","hashOfConfig":"23"},{"size":153,"mtime":1612021967761,"results":"40","hashOfConfig":"23"},{"size":1457,"mtime":1612063826156,"results":"41","hashOfConfig":"23"},{"size":164,"mtime":1612021859454,"results":"42","hashOfConfig":"23"},{"size":3224,"mtime":1612073637333,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1uz4iyd",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\node_project\\react-assignment\\src\\index.js",[],["89","90"],"C:\\node_project\\react-assignment\\src\\reportWebVitals.js",[],"C:\\node_project\\react-assignment\\src\\modules\\App.js",["91","92"],"C:\\node_project\\react-assignment\\src\\modules\\dishes\\list\\index.js",[],"C:\\node_project\\react-assignment\\src\\modules\\dishes\\list\\List.js",["93"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Select,\r\n  TextField,\r\n  MenuItem,\r\n  FormControl,\r\n  Typography,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport * as ACTIONTYPES from \"../../../redux/types/dish.actions.types\";\r\nimport DishCard from \"../card\";\r\nimport { grey, deepOrange, blue } from \"@material-ui/core/colors\";\r\nimport DeleteForeverSharpIcon from \"@material-ui/icons/DeleteForeverSharp\";\r\nimport CustomModal from \"../../global/CustomModal\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  logo: {\r\n    color: deepOrange[500],\r\n    fontFamily: \"'Poppins', sans-serif\",\r\n  },\r\n  addFilterBtn: {\r\n    backgroundColor: blue[700],\r\n    color: \"white\",\r\n    border: \"none\",\r\n    \"&:hover\": {\r\n      backgroundColor: blue[800],\r\n    },\r\n    marginBottom: \"5px\",\r\n  },\r\n\r\n  filterLabel: {\r\n    color: grey[50],\r\n    display: \"inline-block\",\r\n    fontSize: \"1rem\",\r\n    width: \"20%\",\r\n  },\r\n  filterInput: {\r\n    color: grey[50],\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  uploadButton: {\r\n    width: \"fit-content\",\r\n    float: \"right\",\r\n    fontSize: \".8rem\",\r\n  },\r\n  addButton: {\r\n    width: \"fit-content\",\r\n    float: \"right\",\r\n    fontSize: \".8rem\",\r\n    marginLeft: \"auto\",\r\n  },\r\n  orange: {\r\n    backgroundColor: deepOrange[500],\r\n    color: grey[50],\r\n    fontWeight: \"bold\",\r\n    \"&:hover\": {\r\n      backgroundColor: deepOrange[400],\r\n      color: grey[100],\r\n    },\r\n  },\r\n  filterParmasContainer: {\r\n    borderBottom: \"0.5px solid\",\r\n    borderBottomColor: deepOrange[400],\r\n    paddingBottom: \"1.2rem\",\r\n  },\r\n\r\n  filterParams: {\r\n    border: \".5px solid rgba(255,255,255,0.4)\",\r\n    borderRadius: \"0.4rem\",\r\n    color: grey[50],\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"max-content\",\r\n    height: \"2rem\",\r\n    padding: \"0 .5rem\",\r\n    background: \"none\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"rgba(255,255,255,0.7)\",\r\n      color: \"rgba(0,0,0,0.6)\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction List() {\r\n  const classes = useStyles();\r\n  const [filterArray, setFilterArray] = useState([]);\r\n  const [filter, setFilter] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const allDishes = useSelector((state) => state.allDishes.dishes);\r\n  const [dish, setDish] = useState({\r\n    name: \"\",\r\n    ingridients: [],\r\n  });\r\n  const [content, setContent] = useState(\"\");\r\n  const [ingridient, setIngridient] = useState({});\r\n  const [message, setMessage] = useState(null);\r\n  const [file, setFile] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n    const payload = { dish, file, content };\r\n    dispatch({ type: ACTIONTYPES.ADD_REQUEST, payload });\r\n    handleClose();\r\n  }\r\n\r\n  const modules = {\r\n    toolbar: [\r\n      [{ header: [1, 2, 3, 4, false] }],\r\n      [\"bold\", \"italic\", \"underline\"],\r\n      [{ list: \"ordered\" }, { list: \"bullet\" }],\r\n      [\"clean\"],\r\n    ],\r\n  };\r\n  const formats = [\"bold\", \"italic\", \"underline\", \"list\", \"bullet\"];\r\n\r\n  function showMessage(value) {\r\n    setMessage(value);\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 500);\r\n  }\r\n  const changeIngridients = (e) => {\r\n    setIngridient((prev) => {\r\n      return { ...prev, [e.target.name]: e.target.value };\r\n    });\r\n  };\r\n  const addIngridient = () => {\r\n    if (Object.keys(ingridient).length < 0) return;\r\n    if (\r\n      !ingridient.ingridientName ||\r\n      !ingridient.ingridientQuantity ||\r\n      !ingridient.ingridientMetrics\r\n    ) {\r\n      showMessage(\"All feilds are required\");\r\n      return;\r\n    }\r\n    setDish((dish) => ({\r\n      ...dish,\r\n      ingridients: [...dish.ingridients, ingridient],\r\n    }));\r\n    setIngridient({});\r\n  };\r\n\r\n  const handleContentChange = async (content) => {\r\n    setContent(content);\r\n  };\r\n  const fetchAllDishes = (query) => {\r\n    dispatch({ type: ACTIONTYPES.LIST_REQUEST, query });\r\n  };\r\n  const addFilter = () => {\r\n    if (!filter) return;\r\n    if (filterArray.includes(filter)) {\r\n      setFilter(null);\r\n      return;\r\n    }\r\n    setFilterArray([...filterArray, filter]);\r\n    setFilter(null);\r\n    return;\r\n  };\r\n  function changeDish(e) {\r\n    setDish((prev) => {\r\n      return {\r\n        ...prev,\r\n        [e.target.name]: e.target.value,\r\n      };\r\n    });\r\n  }\r\n  function handleClose() {\r\n    setOpen(false);\r\n    setIngridient({});\r\n    setDish({\r\n      name: \"\",\r\n      ingridients: [],\r\n    });\r\n    setContent(\"\");\r\n    setFile(null);\r\n  }\r\n  const fileChangedHandler = (event) => {\r\n    let file_size = event.target.files[0].size;\r\n    let file_type = event.target.files[0].type;\r\n    if (file_size > 100000) {\r\n      alert(\"Please upload photo of max size 100 KB!\");\r\n      event.target.value = null;\r\n    }\r\n    file_type = file_type.split(\"/\")[1];\r\n    const validFileType = [\"jpeg\", \"jpg\", \"png\"].includes(file_type);\r\n    if (!validFileType) {\r\n      alert(\"Unsupported File type! Please upload JPEG, JPG, PNG File\");\r\n      event.target.value = null;\r\n    }\r\n    setFile(event.target.files[0]);\r\n    return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAllDishes(filterArray);\r\n  }, [filterArray]);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"flex-end\"\r\n        alignItems=\"center\"\r\n        className=\"mb-3\"\r\n        spacing={2}\r\n      >\r\n        <Grid item xs={5} className=\"mr-auto\">\r\n          <Typography variant=\"h4\" className={classes.logo}>\r\n            {\" \"}\r\n            Recipe\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid item xs={4} className=\"mr-3\">\r\n          <div style={{ display: \"flex\" }}>\r\n            <TextField\r\n              value={filter ? filter : \"\"}\r\n              onChange={(e) => setFilter(e.target.value)}\r\n              type=\"text\"\r\n              label=\"Filter by Ingridient\"\r\n              placeholder=\"Enter Ingidient\"\r\n              color=\"secondary\"\r\n              variant=\"standard\"\r\n              InputProps={{\r\n                className: classes.filterInput,\r\n                endAdornment: (\r\n                  <Button\r\n                    onClick={() => addFilter()}\r\n                    className={classes.addFilterBtn}\r\n                  >\r\n                    <AddIcon />\r\n                  </Button>\r\n                ),\r\n              }}\r\n            />\r\n          </div>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            className={classes.orange}\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            Add Dish\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <div\r\n        style={{ display: \"flex\", width: \"100%\" }}\r\n        className={classes.filterParmasContainer}\r\n      >\r\n        <div className={classes.filterLabel}>Filter Parameters :</div>\r\n        {filterArray && filterArray.length ? (\r\n          <div\r\n            style={{\r\n              display: \"grid\",\r\n              gridTemplateColumns: \"repeat(5, minmax(0, 1fr))\",\r\n              gridColumnGap: \"10px\",\r\n              width: \"100%\",\r\n              columnWidth: \"fit-content\",\r\n            }}\r\n          >\r\n            {filterArray.map((item, index) => (\r\n              <span\r\n                onClick={() =>\r\n                  setFilterArray((prev) => prev.filter((itm) => itm !== item))\r\n                }\r\n              >\r\n                <p key={index} className={classes.filterParams}>\r\n                  <DeleteForeverSharpIcon /> &nbsp; {item}\r\n                </p>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        className=\"p-3 \"\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(4, minmax(0, 1fr))\",\r\n          gridColumnGap: \"10px\",\r\n        }}\r\n      >\r\n        {allDishes && allDishes.length > 0\r\n          ? allDishes.map((item, index) => (\r\n              <div className=\"mb-4\">\r\n                <DishCard key={index} item={item} />\r\n              </div>\r\n            ))\r\n          : \"No dish found\"}\r\n      </div>\r\n\r\n      <CustomModal\r\n        open={open}\r\n        setOpen={setOpen}\r\n        title=\"Add Dish\"\r\n        size=\"lg\"\r\n        handleCancel={handleClose}\r\n        handleSubmit={handleFormSubmit}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"repeat(3, minmax(0, 1fr))\",\r\n            gridColumnGap: \"30px\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            name=\"name\"\r\n            type=\"text\"\r\n            label=\"Name of Dish\"\r\n            placeholder=\"Enter Dish name\"\r\n            value={dish && dish.name ? dish.name : \"\"}\r\n            onChange={(e) => changeDish(e)}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            component=\"label\"\r\n            color=\"secondary\"\r\n            className={classes.uploadButton}\r\n          >\r\n            Upload File\r\n            <input\r\n              type=\"file\"\r\n              name=\"file\"\r\n              hidden\r\n              onChange={fileChangedHandler}\r\n              required\r\n            />\r\n          </Button>\r\n          {file ? <p>{file.name}</p> : \"No file selected\"}\r\n        </div>\r\n\r\n        <br />\r\n\r\n        <div\r\n          style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"repeat(4, minmax(0, 1fr))\",\r\n            gridColumnGap: \"10px\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            type=\"text\"\r\n            label=\"Ingridient\"\r\n            name=\"ingridientName\"\r\n            placeholder=\"Enter Ingridient\"\r\n            value={\r\n              ingridient && ingridient.ingridientName\r\n                ? ingridient.ingridientName\r\n                : \"\"\r\n            }\r\n            onChange={(e) => changeIngridients(e)}\r\n          />\r\n          <div className=\"d-flex align-items-center justify-content-between\">\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Quantity\"\r\n              name=\"ingridientQuantity\"\r\n              placeholder=\"Enter quantity\"\r\n              className={classes.formControl}\r\n              value={\r\n                ingridient && ingridient.ingridientQuantity\r\n                  ? ingridient.ingridientQuantity\r\n                  : \"\"\r\n              }\r\n              onChange={(e) => changeIngridients(e)}\r\n            />\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"demo-simple-select-helper-label\">\r\n                Metrics\r\n              </InputLabel>\r\n              <Select\r\n                name=\"ingridientMetrics\"\r\n                labelId=\"demo-simple-select-helper-label\"\r\n                id=\"demo-simple-select-helper\"\r\n                className=\"ml-4 \"\r\n                onChange={(e) => changeIngridients(e)}\r\n                value={\r\n                  ingridient && ingridient.ingridientMetrics\r\n                    ? ingridient.ingridientMetrics\r\n                    : \"\"\r\n                }\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"gm\">gm</MenuItem>\r\n                <MenuItem value=\"ml\">ml</MenuItem>\r\n                <MenuItem value=\"ltr\">ltr</MenuItem>\r\n                <MenuItem value=\"lbs\">lbs</MenuItem>\r\n                <MenuItem value=\"kgs\">kgs</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <Button\r\n            variant=\"contained\"\r\n            className={classes.addButton}\r\n            onClick={() => addIngridient()}\r\n          >\r\n            <AddIcon />\r\n          </Button>\r\n          {message && <p>{message}</p>}\r\n        </div>\r\n        <br />\r\n        <InputLabel>Steps</InputLabel>\r\n        <ReactQuill\r\n          name=\"steps\"\r\n          modules={modules}\r\n          formats={formats}\r\n          value={content}\r\n          placeholder=\"Write the Steps to cook the dish\"\r\n          theme={\"snow\"}\r\n          style={{ height: \"150px\" }}\r\n          onChange={(e) => handleContentChange(e)}\r\n        />\r\n        <br />\r\n        <br />\r\n      </CustomModal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","C:\\node_project\\react-assignment\\src\\redux\\store.js",[],"C:\\node_project\\react-assignment\\src\\redux\\reducers\\rootReducer.js",[],"C:\\node_project\\react-assignment\\src\\redux\\sagas\\rootSaga.js",[],"C:\\node_project\\react-assignment\\src\\redux\\reducers\\dish.reducer.js",[],"C:\\node_project\\react-assignment\\src\\redux\\sagas\\dish.saga.js",[],"C:\\node_project\\react-assignment\\src\\redux\\types\\dish.actions.types.js",[],"C:\\node_project\\react-assignment\\src\\redux\\actions\\dish.actions.js",[],"C:\\node_project\\react-assignment\\src\\services\\dish.js",[],"C:\\node_project\\react-assignment\\src\\modules\\global\\CustomModal.js",[],"C:\\node_project\\react-assignment\\src\\utils\\imageToBase64.js",[],"C:\\node_project\\react-assignment\\src\\modules\\dishes\\card\\index.js",[],"C:\\node_project\\react-assignment\\src\\modules\\dishes\\card\\DishCard.js",[],"C:\\node_project\\react-assignment\\src\\modules\\dishes\\container\\index.js",[],"C:\\node_project\\react-assignment\\src\\modules\\dishes\\container\\DishComponent.js",["94"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport DishList from \"../list\";\r\nimport DishDetails from \"../details\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CustomModal from \"../../global/CustomModal\";\r\nimport * as ACTION from \"../../../redux/types/dish.actions.types\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n  },\r\n  listContainer: {},\r\n}));\r\nfunction DishComponent() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [open, setOpen] = useState(false);\r\n  const details = useSelector((state) => state.allDishes.details);\r\n\r\n  function handleClose() {\r\n    dispatch({ type: ACTION.SELECT_DISH_DETAILS });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!details) return;\r\n    setOpen(!open);\r\n  }, [details]);\r\n  return (\r\n    <>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} className={classes.listContainer}>\r\n            <DishList />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <CustomModal\r\n        open={open}\r\n        setOpen={setOpen}\r\n        handleCancel={handleClose}\r\n        title={details ? `${details.name} Recipe` : \"\"}\r\n        size=\"xl\"\r\n      >\r\n        <DishDetails details={details} />\r\n      </CustomModal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DishComponent;\r\n","C:\\node_project\\react-assignment\\src\\modules\\dishes\\details\\index.js",[],"C:\\node_project\\react-assignment\\src\\modules\\dishes\\details\\DishDetails.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":18,"column":5,"nodeType":"101","messageId":"102","endLine":18,"endColumn":15},{"ruleId":"99","severity":1,"message":"100","line":20,"column":5,"nodeType":"101","messageId":"102","endLine":20,"endColumn":15},{"ruleId":"103","severity":1,"message":"104","line":214,"column":6,"nodeType":"105","endLine":214,"endColumn":19,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"107","line":30,"column":6,"nodeType":"105","endLine":30,"endColumn":15,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-dupe-keys","Duplicate key 'background'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllDishes'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has a missing dependency: 'open'. Either include it or remove the dependency array. You can also do a functional update 'setOpen(o => ...)' if you only need 'open' in the 'setOpen' call.",["112"],"no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [fetchAllDishes, filterArray]",{"range":"117","text":"118"},"Update the dependencies array to be: [details, open]",{"range":"119","text":"120"},[5496,5509],"[fetchAllDishes, filterArray]",[902,911],"[details, open]"]